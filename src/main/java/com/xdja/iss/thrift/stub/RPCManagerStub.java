/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xdja.iss.thrift.stub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-10-30")
public class RPCManagerStub {

  /**
   * **************************************************************************************************
   *  RPC调用相关接口
   * ***************************************************************************************************
   */
  public interface Iface {

    /**
     * @brief         实时业务数据统计
     * @param  ext    扩展参数，JSON字符串格式
     * @return ResStr res中返回操作结果，value中返回字符串
     *  
     * 
     * @param ext
     */
    public com.xdja.iss.thrift.datatype.ResStr queryService(String ext) throws org.apache.thrift.TException;

    /**
     * @brief              实时连接数据统计
     * @param  serviceType 业务类型(0:全部 1:web反向 2:web透明 3:cs反向 4:cs透明)
     * @param  ext         扩展参数，JSON字符串格式
     * @return ResStr      res中返回操作结果，value中返回字符串
     *  
     * 
     * @param serviceType
     * @param ext
     */
    public com.xdja.iss.thrift.datatype.ResStr queryConntrack(int serviceType, String ext) throws org.apache.thrift.TException;

    /**
     * @brief              实时连接数据详情
     * @param  serviceType 业务类型(0:全部 1:web反向 2:web透明 3:cs反向 4:cs透明)
     * @param  proxyId     代理规则ID
     * @param  ext         扩展参数，JSON字符串格式
     * @return ResStr      res中返回操作结果，value中返回字符串
     *  
     * 
     * @param serviceType
     * @param proxyId
     * @param ext
     */
    public com.xdja.iss.thrift.datatype.ResStr queryDetail(int serviceType, int proxyId, String ext) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryService(String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException;

    public void queryConntrack(int serviceType, String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException;

    public void queryDetail(int serviceType, int proxyId, String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.xdja.iss.thrift.datatype.ResStr queryService(String ext) throws org.apache.thrift.TException
    {
      send_queryService(ext);
      return recv_queryService();
    }

    public void send_queryService(String ext) throws org.apache.thrift.TException
    {
      queryService_args args = new queryService_args();
      args.setExt(ext);
      sendBase("queryService", args);
    }

    public com.xdja.iss.thrift.datatype.ResStr recv_queryService() throws org.apache.thrift.TException
    {
      queryService_result result = new queryService_result();
      receiveBase(result, "queryService");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryService failed: unknown result");
    }

    public com.xdja.iss.thrift.datatype.ResStr queryConntrack(int serviceType, String ext) throws org.apache.thrift.TException
    {
      send_queryConntrack(serviceType, ext);
      return recv_queryConntrack();
    }

    public void send_queryConntrack(int serviceType, String ext) throws org.apache.thrift.TException
    {
      queryConntrack_args args = new queryConntrack_args();
      args.setServiceType(serviceType);
      args.setExt(ext);
      sendBase("queryConntrack", args);
    }

    public com.xdja.iss.thrift.datatype.ResStr recv_queryConntrack() throws org.apache.thrift.TException
    {
      queryConntrack_result result = new queryConntrack_result();
      receiveBase(result, "queryConntrack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryConntrack failed: unknown result");
    }

    public com.xdja.iss.thrift.datatype.ResStr queryDetail(int serviceType, int proxyId, String ext) throws org.apache.thrift.TException
    {
      send_queryDetail(serviceType, proxyId, ext);
      return recv_queryDetail();
    }

    public void send_queryDetail(int serviceType, int proxyId, String ext) throws org.apache.thrift.TException
    {
      queryDetail_args args = new queryDetail_args();
      args.setServiceType(serviceType);
      args.setProxyId(proxyId);
      args.setExt(ext);
      sendBase("queryDetail", args);
    }

    public com.xdja.iss.thrift.datatype.ResStr recv_queryDetail() throws org.apache.thrift.TException
    {
      queryDetail_result result = new queryDetail_result();
      receiveBase(result, "queryDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDetail failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryService(String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryService_call method_call = new queryService_call(ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryService_call extends org.apache.thrift.async.TAsyncMethodCall<com.xdja.iss.thrift.datatype.ResStr> {
      private String ext;
      public queryService_call(String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryService", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryService_args args = new queryService_args();
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xdja.iss.thrift.datatype.ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryService();
      }
    }

    public void queryConntrack(int serviceType, String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryConntrack_call method_call = new queryConntrack_call(serviceType, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryConntrack_call extends org.apache.thrift.async.TAsyncMethodCall<com.xdja.iss.thrift.datatype.ResStr> {
      private int serviceType;
      private String ext;
      public queryConntrack_call(int serviceType, String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceType = serviceType;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryConntrack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryConntrack_args args = new queryConntrack_args();
        args.setServiceType(serviceType);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xdja.iss.thrift.datatype.ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryConntrack();
      }
    }

    public void queryDetail(int serviceType, int proxyId, String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryDetail_call method_call = new queryDetail_call(serviceType, proxyId, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryDetail_call extends org.apache.thrift.async.TAsyncMethodCall<com.xdja.iss.thrift.datatype.ResStr> {
      private int serviceType;
      private int proxyId;
      private String ext;
      public queryDetail_call(int serviceType, int proxyId, String ext, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceType = serviceType;
        this.proxyId = proxyId;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryDetail_args args = new queryDetail_args();
        args.setServiceType(serviceType);
        args.setProxyId(proxyId);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xdja.iss.thrift.datatype.ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryDetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryService", new queryService());
      processMap.put("queryConntrack", new queryConntrack());
      processMap.put("queryDetail", new queryDetail());
      return processMap;
    }

    public static class queryService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryService_args> {
      public queryService() {
        super("queryService");
      }

      public queryService_args getEmptyArgsInstance() {
        return new queryService_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public queryService_result getResult(I iface, queryService_args args) throws org.apache.thrift.TException {
        queryService_result result = new queryService_result();
        result.success = iface.queryService(args.ext);
        return result;
      }
    }

    public static class queryConntrack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryConntrack_args> {
      public queryConntrack() {
        super("queryConntrack");
      }

      public queryConntrack_args getEmptyArgsInstance() {
        return new queryConntrack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public queryConntrack_result getResult(I iface, queryConntrack_args args) throws org.apache.thrift.TException {
        queryConntrack_result result = new queryConntrack_result();
        result.success = iface.queryConntrack(args.serviceType, args.ext);
        return result;
      }
    }

    public static class queryDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDetail_args> {
      public queryDetail() {
        super("queryDetail");
      }

      public queryDetail_args getEmptyArgsInstance() {
        return new queryDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public queryDetail_result getResult(I iface, queryDetail_args args) throws org.apache.thrift.TException {
        queryDetail_result result = new queryDetail_result();
        result.success = iface.queryDetail(args.serviceType, args.proxyId, args.ext);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryService", new queryService());
      processMap.put("queryConntrack", new queryConntrack());
      processMap.put("queryDetail", new queryDetail());
      return processMap;
    }

    public static class queryService<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryService_args, com.xdja.iss.thrift.datatype.ResStr> {
      public queryService() {
        super("queryService");
      }

      public queryService_args getEmptyArgsInstance() {
        return new queryService_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr>() { 
          public void onComplete(com.xdja.iss.thrift.datatype.ResStr o) {
            queryService_result result = new queryService_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryService_result result = new queryService_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryService_args args, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException {
        iface.queryService(args.ext,resultHandler);
      }
    }

    public static class queryConntrack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryConntrack_args, com.xdja.iss.thrift.datatype.ResStr> {
      public queryConntrack() {
        super("queryConntrack");
      }

      public queryConntrack_args getEmptyArgsInstance() {
        return new queryConntrack_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr>() { 
          public void onComplete(com.xdja.iss.thrift.datatype.ResStr o) {
            queryConntrack_result result = new queryConntrack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryConntrack_result result = new queryConntrack_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryConntrack_args args, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException {
        iface.queryConntrack(args.serviceType, args.ext,resultHandler);
      }
    }

    public static class queryDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDetail_args, com.xdja.iss.thrift.datatype.ResStr> {
      public queryDetail() {
        super("queryDetail");
      }

      public queryDetail_args getEmptyArgsInstance() {
        return new queryDetail_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr>() { 
          public void onComplete(com.xdja.iss.thrift.datatype.ResStr o) {
            queryDetail_result result = new queryDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryDetail_result result = new queryDetail_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.xdja.iss.thrift.datatype.ResStr> resultHandler) throws org.apache.thrift.TException {
        iface.queryDetail(args.serviceType, args.proxyId, args.ext,resultHandler);
      }
    }

  }

  public static class queryService_args implements org.apache.thrift.TBase<queryService_args, queryService_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryService_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryService_args");

    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryService_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryService_argsTupleSchemeFactory();

    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXT((short)1, "ext");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryService_args.class, metaDataMap);
    }

    public queryService_args() {
    }

    public queryService_args(
      String ext)
    {
      this();
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryService_args(queryService_args other) {
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public queryService_args deepCopy() {
      return new queryService_args(this);
    }

    @Override
    public void clear() {
      this.ext = null;
    }

    public String getExt() {
      return this.ext;
    }

    public queryService_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryService_args)
        return this.equals((queryService_args)that);
      return false;
    }

    public boolean equals(queryService_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExt()) ? 131071 : 524287);
      if (isSetExt())
        hashCode = hashCode * 8191 + ext.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryService_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryService_args(");
      boolean first = true;

      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryService_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryService_argsStandardScheme getScheme() {
        return new queryService_argsStandardScheme();
      }
    }

    private static class queryService_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryService_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryService_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryService_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryService_argsTupleScheme getScheme() {
        return new queryService_argsTupleScheme();
      }
    }

    private static class queryService_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryService_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExt()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryService_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryService_result implements org.apache.thrift.TBase<queryService_result, queryService_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryService_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryService_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryService_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryService_resultTupleSchemeFactory();

    public com.xdja.iss.thrift.datatype.ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xdja.iss.thrift.datatype.ResStr.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryService_result.class, metaDataMap);
    }

    public queryService_result() {
    }

    public queryService_result(
      com.xdja.iss.thrift.datatype.ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryService_result(queryService_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xdja.iss.thrift.datatype.ResStr(other.success);
      }
    }

    public queryService_result deepCopy() {
      return new queryService_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.xdja.iss.thrift.datatype.ResStr getSuccess() {
      return this.success;
    }

    public queryService_result setSuccess(com.xdja.iss.thrift.datatype.ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xdja.iss.thrift.datatype.ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryService_result)
        return this.equals((queryService_result)that);
      return false;
    }

    public boolean equals(queryService_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryService_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryService_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryService_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryService_resultStandardScheme getScheme() {
        return new queryService_resultStandardScheme();
      }
    }

    private static class queryService_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryService_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xdja.iss.thrift.datatype.ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryService_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryService_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryService_resultTupleScheme getScheme() {
        return new queryService_resultTupleScheme();
      }
    }

    private static class queryService_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryService_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryService_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.xdja.iss.thrift.datatype.ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryConntrack_args implements org.apache.thrift.TBase<queryConntrack_args, queryConntrack_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryConntrack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryConntrack_args");

    private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryConntrack_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryConntrack_argsTupleSchemeFactory();

    public int serviceType; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_TYPE((short)1, "serviceType"),
      EXT((short)2, "ext");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_TYPE
            return SERVICE_TYPE;
          case 2: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVICETYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryConntrack_args.class, metaDataMap);
    }

    public queryConntrack_args() {
    }

    public queryConntrack_args(
      int serviceType,
      String ext)
    {
      this();
      this.serviceType = serviceType;
      setServiceTypeIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryConntrack_args(queryConntrack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serviceType = other.serviceType;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public queryConntrack_args deepCopy() {
      return new queryConntrack_args(this);
    }

    @Override
    public void clear() {
      setServiceTypeIsSet(false);
      this.serviceType = 0;
      this.ext = null;
    }

    public int getServiceType() {
      return this.serviceType;
    }

    public queryConntrack_args setServiceType(int serviceType) {
      this.serviceType = serviceType;
      setServiceTypeIsSet(true);
      return this;
    }

    public void unsetServiceType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
    }

    /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
    }

    public void setServiceTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICETYPE_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public queryConntrack_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_TYPE:
        if (value == null) {
          unsetServiceType();
        } else {
          setServiceType((Integer)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_TYPE:
        return getServiceType();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_TYPE:
        return isSetServiceType();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryConntrack_args)
        return this.equals((queryConntrack_args)that);
      return false;
    }

    public boolean equals(queryConntrack_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serviceType = true;
      boolean that_present_serviceType = true;
      if (this_present_serviceType || that_present_serviceType) {
        if (!(this_present_serviceType && that_present_serviceType))
          return false;
        if (this.serviceType != that.serviceType)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + serviceType;

      hashCode = hashCode * 8191 + ((isSetExt()) ? 131071 : 524287);
      if (isSetExt())
        hashCode = hashCode * 8191 + ext.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryConntrack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryConntrack_args(");
      boolean first = true;

      sb.append("serviceType:");
      sb.append(this.serviceType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryConntrack_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryConntrack_argsStandardScheme getScheme() {
        return new queryConntrack_argsStandardScheme();
      }
    }

    private static class queryConntrack_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryConntrack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryConntrack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serviceType = iprot.readI32();
                struct.setServiceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryConntrack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.serviceType);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryConntrack_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryConntrack_argsTupleScheme getScheme() {
        return new queryConntrack_argsTupleScheme();
      }
    }

    private static class queryConntrack_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryConntrack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryConntrack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServiceType()) {
          optionals.set(0);
        }
        if (struct.isSetExt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServiceType()) {
          oprot.writeI32(struct.serviceType);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryConntrack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serviceType = iprot.readI32();
          struct.setServiceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryConntrack_result implements org.apache.thrift.TBase<queryConntrack_result, queryConntrack_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryConntrack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryConntrack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryConntrack_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryConntrack_resultTupleSchemeFactory();

    public com.xdja.iss.thrift.datatype.ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xdja.iss.thrift.datatype.ResStr.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryConntrack_result.class, metaDataMap);
    }

    public queryConntrack_result() {
    }

    public queryConntrack_result(
      com.xdja.iss.thrift.datatype.ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryConntrack_result(queryConntrack_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xdja.iss.thrift.datatype.ResStr(other.success);
      }
    }

    public queryConntrack_result deepCopy() {
      return new queryConntrack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.xdja.iss.thrift.datatype.ResStr getSuccess() {
      return this.success;
    }

    public queryConntrack_result setSuccess(com.xdja.iss.thrift.datatype.ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xdja.iss.thrift.datatype.ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryConntrack_result)
        return this.equals((queryConntrack_result)that);
      return false;
    }

    public boolean equals(queryConntrack_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryConntrack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryConntrack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryConntrack_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryConntrack_resultStandardScheme getScheme() {
        return new queryConntrack_resultStandardScheme();
      }
    }

    private static class queryConntrack_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryConntrack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryConntrack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xdja.iss.thrift.datatype.ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryConntrack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryConntrack_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryConntrack_resultTupleScheme getScheme() {
        return new queryConntrack_resultTupleScheme();
      }
    }

    private static class queryConntrack_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryConntrack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryConntrack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryConntrack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.xdja.iss.thrift.datatype.ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryDetail_args implements org.apache.thrift.TBase<queryDetail_args, queryDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDetail_args");

    private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROXY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDetail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDetail_argsTupleSchemeFactory();

    public int serviceType; // required
    public int proxyId; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_TYPE((short)1, "serviceType"),
      PROXY_ID((short)2, "proxyId"),
      EXT((short)3, "ext");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_TYPE
            return SERVICE_TYPE;
          case 2: // PROXY_ID
            return PROXY_ID;
          case 3: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVICETYPE_ISSET_ID = 0;
    private static final int __PROXYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROXY_ID, new org.apache.thrift.meta_data.FieldMetaData("proxyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDetail_args.class, metaDataMap);
    }

    public queryDetail_args() {
    }

    public queryDetail_args(
      int serviceType,
      int proxyId,
      String ext)
    {
      this();
      this.serviceType = serviceType;
      setServiceTypeIsSet(true);
      this.proxyId = proxyId;
      setProxyIdIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDetail_args(queryDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serviceType = other.serviceType;
      this.proxyId = other.proxyId;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public queryDetail_args deepCopy() {
      return new queryDetail_args(this);
    }

    @Override
    public void clear() {
      setServiceTypeIsSet(false);
      this.serviceType = 0;
      setProxyIdIsSet(false);
      this.proxyId = 0;
      this.ext = null;
    }

    public int getServiceType() {
      return this.serviceType;
    }

    public queryDetail_args setServiceType(int serviceType) {
      this.serviceType = serviceType;
      setServiceTypeIsSet(true);
      return this;
    }

    public void unsetServiceType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
    }

    /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
    }

    public void setServiceTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICETYPE_ISSET_ID, value);
    }

    public int getProxyId() {
      return this.proxyId;
    }

    public queryDetail_args setProxyId(int proxyId) {
      this.proxyId = proxyId;
      setProxyIdIsSet(true);
      return this;
    }

    public void unsetProxyId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROXYID_ISSET_ID);
    }

    /** Returns true if field proxyId is set (has been assigned a value) and false otherwise */
    public boolean isSetProxyId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROXYID_ISSET_ID);
    }

    public void setProxyIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROXYID_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public queryDetail_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_TYPE:
        if (value == null) {
          unsetServiceType();
        } else {
          setServiceType((Integer)value);
        }
        break;

      case PROXY_ID:
        if (value == null) {
          unsetProxyId();
        } else {
          setProxyId((Integer)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_TYPE:
        return getServiceType();

      case PROXY_ID:
        return getProxyId();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_TYPE:
        return isSetServiceType();
      case PROXY_ID:
        return isSetProxyId();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDetail_args)
        return this.equals((queryDetail_args)that);
      return false;
    }

    public boolean equals(queryDetail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serviceType = true;
      boolean that_present_serviceType = true;
      if (this_present_serviceType || that_present_serviceType) {
        if (!(this_present_serviceType && that_present_serviceType))
          return false;
        if (this.serviceType != that.serviceType)
          return false;
      }

      boolean this_present_proxyId = true;
      boolean that_present_proxyId = true;
      if (this_present_proxyId || that_present_proxyId) {
        if (!(this_present_proxyId && that_present_proxyId))
          return false;
        if (this.proxyId != that.proxyId)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + serviceType;

      hashCode = hashCode * 8191 + proxyId;

      hashCode = hashCode * 8191 + ((isSetExt()) ? 131071 : 524287);
      if (isSetExt())
        hashCode = hashCode * 8191 + ext.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProxyId()).compareTo(other.isSetProxyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProxyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyId, other.proxyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDetail_args(");
      boolean first = true;

      sb.append("serviceType:");
      sb.append(this.serviceType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("proxyId:");
      sb.append(this.proxyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryDetail_argsStandardScheme getScheme() {
        return new queryDetail_argsStandardScheme();
      }
    }

    private static class queryDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serviceType = iprot.readI32();
                struct.setServiceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROXY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.proxyId = iprot.readI32();
                struct.setProxyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.serviceType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROXY_ID_FIELD_DESC);
        oprot.writeI32(struct.proxyId);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryDetail_argsTupleScheme getScheme() {
        return new queryDetail_argsTupleScheme();
      }
    }

    private static class queryDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServiceType()) {
          optionals.set(0);
        }
        if (struct.isSetProxyId()) {
          optionals.set(1);
        }
        if (struct.isSetExt()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceType()) {
          oprot.writeI32(struct.serviceType);
        }
        if (struct.isSetProxyId()) {
          oprot.writeI32(struct.proxyId);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceType = iprot.readI32();
          struct.setServiceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.proxyId = iprot.readI32();
          struct.setProxyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryDetail_result implements org.apache.thrift.TBase<queryDetail_result, queryDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDetail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDetail_resultTupleSchemeFactory();

    public com.xdja.iss.thrift.datatype.ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xdja.iss.thrift.datatype.ResStr.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDetail_result.class, metaDataMap);
    }

    public queryDetail_result() {
    }

    public queryDetail_result(
      com.xdja.iss.thrift.datatype.ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDetail_result(queryDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xdja.iss.thrift.datatype.ResStr(other.success);
      }
    }

    public queryDetail_result deepCopy() {
      return new queryDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.xdja.iss.thrift.datatype.ResStr getSuccess() {
      return this.success;
    }

    public queryDetail_result setSuccess(com.xdja.iss.thrift.datatype.ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xdja.iss.thrift.datatype.ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDetail_result)
        return this.equals((queryDetail_result)that);
      return false;
    }

    public boolean equals(queryDetail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryDetail_resultStandardScheme getScheme() {
        return new queryDetail_resultStandardScheme();
      }
    }

    private static class queryDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xdja.iss.thrift.datatype.ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryDetail_resultTupleScheme getScheme() {
        return new queryDetail_resultTupleScheme();
      }
    }

    private static class queryDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.xdja.iss.thrift.datatype.ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
